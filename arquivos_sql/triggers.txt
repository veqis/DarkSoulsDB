CREATE OR REPLACE FUNCTION cura_personagem (nome_personagem VARCHAR)
RETURNS VARCHAR AS $$
BEGIN
	UPDATE estado_personagem 
	SET hp_atual = hp_atual + 10
	WHERE estado_personagem.nome_personagem = cura_personagem.nome_personagem;
	
	RETURN 'Personagem curado.';
END;
$$ LANGUAGE plpgsql;

SELECT cura_personagem ('Knight Solaire');
-------------------------------------------

CREATE TABLE estado_personagem (
  nome_personagem VARCHAR(45) NOT NULL,
  UNIQUE (nome_personagem),
  hp_atual int NOT NULL,
  almas_atual int NOT NULL,
  humanidade_atual int NOT NULL,
  estus_atual int,
  FOREIGN KEY (nome_personagem) REFERENCES personagens (nome) ON DELETE CASCADE ON UPDATE CASCADE
);

---------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION Novo_Personagem()
RETURNS TRIGGER AS $$
BEGIN
	INSERT INTO estado_personagem (nome_personagem, hp_atual, almas_atual, hum_atual, estus_atual)
	VALUES (NEW.nome, NEW.hp, NEW.almas, NEW.hum, 0);
	RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER Update_Estado_Personagem
AFTER INSERT ON personagens
FOR EACH ROW
EXECUTE FUNCTION Novo_Personagem();
------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION Calc_Estus()
RETURNS TRIGGER AS $$
BEGIN
	UPDATE estado_personagem
	SET estus_atual = (SELECT nivel_bonefire FROM respawn WHERE nome_personagem = NEW.nome_personagem) * 5
	WHERE nome_personagem = NEW.nome_personagem;
	RETURN NEW;
END;
$$ LANGUAGE plpgsql;

INSERT INTO respawn (nome_personagem,nome_mapa,nivel_bonefire) 
VALUES
('Knight Solaire','Blighttown', 3); 
------------------------------------------------------------------------------------------------
