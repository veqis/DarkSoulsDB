CREATE OR REPLACE FUNCTION cura_personagem (nome_personagem VARCHAR)
RETURNS VARCHAR AS $$
DECLARE
    estus_disponivel INT;
BEGIN
    SELECT estus_atual INTO estus_disponivel
    FROM estado_personagem
    WHERE estado_personagem.nome_personagem = cura_personagem.nome_personagem;
    
    IF estus_disponivel > 0 THEN
        UPDATE estado_personagem 
        SET hp_atual = hp_atual + 10,
            estus_atual = estus_atual - 1
        WHERE estado_personagem.nome_personagem = cura_personagem.nome_personagem;
        
        RETURN 'Personagem curado.';
    ELSE
        RETURN 'Você não tem estus suficiente para curar-se.';
    END IF;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION Novo_Personagem()
RETURNS TRIGGER AS $$
BEGIN
	INSERT INTO estado_personagem (nome_personagem, hp_atual, almas_atual, hum_atual, estus_atual)
	VALUES (NEW.nome, NEW.hp, NEW.almas, NEW.hum, 0);
	RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER Update_Estado_Personagem
AFTER INSERT ON personagens
FOR EACH ROW
EXECUTE FUNCTION Novo_Personagem();


CREATE OR REPLACE FUNCTION Calc_Estus()
RETURNS TRIGGER AS $$
BEGIN
	UPDATE estado_personagem
	SET estus_atual = (SELECT nivel_bonefire FROM respawn WHERE nome_personagem = NEW.nome_personagem) * 5
	WHERE nome_personagem = NEW.nome_personagem;
	RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER Estus_UPDT
AFTER INSERT ON respawn
FOR EACH ROW
EXECUTE FUNCTION Calc_Estus();

