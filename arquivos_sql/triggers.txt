-------------------------------------------->Função de curar personagem<-----------------------------------------------------------------
CREATE OR REPLACE FUNCTION Cura_Personagem (nome_personagem VARCHAR)
RETURNS VARCHAR AS $$
DECLARE
    estus_disponivel INT;
BEGIN
    SELECT estus_atual INTO estus_disponivel
    FROM estado_personagem
    WHERE estado_personagem.nome_personagem = cura_personagem.nome_personagem;
    
    IF estus_disponivel > 0 THEN
        UPDATE estado_personagem 
        SET hp_atual = hp_atual + 10,
            estus_atual = estus_atual - 1
        WHERE estado_personagem.nome_personagem = cura_personagem.nome_personagem;
        
        RETURN 'Personagem curado.';
    ELSE
        RETURN 'Você não tem estus suficiente para curar-se.';
    END IF;
END;
$$ LANGUAGE plpgsql;

-------------------------------------------->Trigger que não permite hp atual ultrapassar hp_maximo<-------------------------------------
CREATE OR REPLACE FUNCTION HP_Check()
RETURNS TRIGGER AS $$
DECLARE
    hp_max INT;
BEGIN
    SELECT hp INTO hp_max
    FROM personagens
    WHERE nome = NEW.nome_personagem;
    
    IF NEW.hp_atual > hp_max THEN
        UPDATE estado_personagem
        SET hp_atual = hp_max
        WHERE nome_personagem = NEW.nome_personagem;
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER Trava_HP
AFTER UPDATE ON estado_personagem
FOR EACH ROW
EXECUTE FUNCTION HP_Check();

-------------------------------------------->Trigger que insere dados do save do personagem para status atual<---------------------------
CREATE OR REPLACE FUNCTION Novo_Personagem()
RETURNS TRIGGER AS $$
BEGIN
	INSERT INTO estado_personagem (nome_personagem, hp_atual, almas_atual, hum_atual, estus_atual)
	VALUES (NEW.nome, NEW.hp, NEW.almas, NEW.hum, 0);
	RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER Update_Estado_Personagem
AFTER INSERT ON personagens
FOR EACH ROW
EXECUTE FUNCTION Novo_Personagem();

-------------------------------------------->Trigger que ajusta a quantidade de estus atual do personagem<-------------------------------
CREATE OR REPLACE FUNCTION Calc_Estus()
RETURNS TRIGGER AS $$
BEGIN
	UPDATE estado_personagem
	SET estus_atual = (SELECT nivel_bonefire FROM respawn WHERE nome_personagem = NEW.nome_personagem) * 5
	WHERE nome_personagem = NEW.nome_personagem;
	RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER Estus_UPDT
AFTER INSERT ON respawn
FOR EACH ROW
EXECUTE FUNCTION Calc_Estus();



-------------------------------------------->Função de criar personagem<-----------------------------------------------------------------
CREATE OR REPLACE FUNCTION Criar_Personagem(nome_personagem VARCHAR, classe VARCHAR)
RETURNS VARCHAR AS $$
BEGIN
    IF classe = 'Warrior' THEN
        INSERT INTO personagens (nome, classe, almas, hp, stamina, equip_load, item_discovery, attunment_slot, bleed_res, poison_res, curse_res, poise, nivel, vit, att, endu, str, dex, res, int, fth, hum)
        VALUES (nome_personagem, classe, 0, 400, 90, 50, 100, 0, 48, 36, 30, 0, 4, 11, 8, 12, 13, 13, 11, 9, 9, 0);
        
        RETURN 'Personagem criado com sucesso.';
    ELSIF classe = 'Knight' THEN
        INSERT INTO personagens (nome, classe, almas, hp, stamina, equip_load, item_discovery, attunment_slot, bleed_res, poison_res, curse_res, poise, nivel, vit, att, endu, str, dex, res, int, fth, hum)
        VALUES (nome_personagem, classe, 0, 400, 90, 0, 100, 0, 40, 30, 30, 0, 5, 14, 10, 10, 11, 11, 10, 9, 11, 0);
        
        RETURN 'Personagem criado com sucesso.';
    ELSIF classe = 'Wanderer' THEN
        INSERT INTO personagens (nome, classe, almas, hp, stamina, equip_load, item_discovery, attunment_slot, bleed_res, poison_res, curse_res, poise, nivel, vit, att, endu, str, dex, res, int, fth, hum)
        VALUES (nome_personagem, classe, 0, 400, 90, 0, 100, 0, 40, 42, 30, 0, 3, 10, 11, 10, 10, 14, 12, 11, 8, 0);
        
        RETURN 'Personagem criado com sucesso.';
    ELSIF classe = 'Thief' THEN
        INSERT INTO personagens (nome, classe, almas, hp, stamina, equip_load, item_discovery, attunment_slot, bleed_res, poison_res, curse_res, poise, nivel, vit, att, endu, str, dex, res, int, fth, hum)
        VALUES (nome_personagem, classe, 0, 400, 90, 0, 100, 0, 37, 30, 30, 0, 5, 9, 11, 9, 9, 15, 10, 12, 11, 0);
        
        RETURN 'Personagem criado com sucesso.';
    ELSIF classe = 'Bandit' THEN
        INSERT INTO personagens (nome, classe, almas, hp, stamina, equip_load, item_discovery, attunment_slot, bleed_res, poison_res, curse_res, poise, nivel, vit, att, endu, str, dex, res, int, fth, hum)
        VALUES (nome_personagem, classe, 0, 400, 90, 0, 100, 0, 56, 36, 36, 0, 4, 12, 8, 14, 14, 9, 11, 8, 10, 0);
        
        RETURN 'Personagem criado com sucesso.';
    ELSIF classe = 'Hunter' THEN
        INSERT INTO personagens (nome, classe, almas, hp, stamina, equip_load, item_discovery, attunment_slot, bleed_res, poison_res, curse_res, poise, nivel, vit, att, endu, str, dex, res, int, fth, hum)
        VALUES (nome_personagem, classe, 0, 400, 90, 0, 100, 0, 44, 36, 30, 0, 4, 11, 9, 11, 12, 14, 11, 9, 9, 0);
        
        RETURN 'Personagem criado com sucesso.';
    ELSIF classe = 'Sorcerer' THEN
        INSERT INTO personagens (nome, classe, almas, hp, stamina, equip_load, item_discovery, attunment_slot, bleed_res, poison_res, curse_res, poise, nivel, vit, att, endu, str, dex, res, int, fth, hum)
        VALUES (nome_personagem, classe, 0, 400, 90, 0, 100, 0, 33, 26, 30, 0, 3, 8, 15, 8, 9, 11, 8, 15, 8, 0);
        
        RETURN 'Personagem criado com sucesso.';
    ELSIF classe = 'Pyromancer' THEN
        INSERT INTO personagens (nome, classe, almas, hp, stamina, equip_load, item_discovery, attunment_slot, bleed_res, poison_res, curse_res, poise, nivel, vit, att, endu, str, dex, res, int, fth, hum)
        VALUES (nome_personagem, classe, 0, 400, 90, 0, 100, 0, 44, 42, 30, 0, 1, 10, 12, 11, 12, 9, 12, 10, 8, 0);
        
        RETURN 'Personagem criado com sucesso.';
    ELSIF classe = 'Cleric' THEN
        INSERT INTO personagens (nome, classe, almas, hp, stamina, equip_load, item_discovery, attunment_slot, bleed_res, poison_res, curse_res, poise, nivel, vit, att, endu, str, dex, res, int, fth, hum)
        VALUES (nome_personagem, classe, 0, 400, 90, 0, 100, 0, 37, 36, 30, 0, 2, 11, 11, 9, 12, 8, 11, 8, 14, 0);
        
        RETURN 'Personagem criado com sucesso.';
    ELSIF classe = 'Deprived' THEN
        INSERT INTO personagens (nome, classe, almas, hp, stamina, equip_load, item_discovery, attunment_slot, bleed_res, poison_res, curse_res, poise, nivel, vit, att, endu, str, dex, res, int, fth, hum)
        VALUES (nome_personagem, classe, 0, 400, 90, 0, 100, 0, 44, 36, 30, 0, 6, 11, 11, 11, 11, 11, 11, 11, 11, 0);
        
        RETURN 'Personagem criado com sucesso.';
    ELSE
        RETURN 'Classe não suportada.';
    END IF;
END;
$$ LANGUAGE plpgsql;

-----SELECT Criar_Personagem('jose', 'Deprived');
-----Adicionar os itens das classes

-------------------------------------------->Trigger que autocalcula status dos personagens<---------------------------------------------
CREATE OR REPLACE FUNCTION Calcular_Status()
RETURNS TRIGGER AS $$
DECLARE
    soma_poise INT;
BEGIN
    SELECT SUM(a.poise) INTO soma_poise
    FROM armaduras a
    JOIN equipa e ON a.nome_armadura = e.nome_item
    WHERE e.nome_personagem = new.nome;

    UPDATE personagens
    SET hp = 300 + (vit * 50),
        stamina = 90 + (endu * 2),
        equip_load = 50 + endu,
        item_discovery = 100 + (10 * hum),
        attunment_slot = (att / 5),
        bleed_res = 30 + endu,
        poison_res = 30 + res,
        curse_res = 30 + hum,
        poise = soma_poise
    WHERE nome = NEW.nome;

    IF ( (SELECT stamina FROM personagens WHERE nome = NEW.nome) > 160) THEN
        UPDATE personagens
        SET stamina = 160
        WHERE nome = NEW.nome;
    END IF;

    IF ( (SELECT item_discovery FROM personagens WHERE nome = NEW.nome) > 200) THEN
        UPDATE personagens
        SET item_discovery = 200
        WHERE nome = NEW.nome;
    END IF;

    IF ( (SELECT attunment_slot FROM personagens WHERE nome = NEW.nome) > 10) THEN
        UPDATE personagens
        SET attunment_slot = 10
        WHERE nome = NEW.nome;
    END IF;

    IF ( (SELECT bleed_res FROM personagens WHERE nome = NEW.nome) > 150) THEN
        UPDATE personagens
        SET bleed_res = 150
        WHERE nome = NEW.nome;
    END IF;

    IF ( (SELECT poison_res FROM personagens WHERE nome = NEW.nome) > 150) THEN
        UPDATE personagens
        SET poison_res = 150
        WHERE nome = NEW.nome;
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER Edit_Status
AFTER INSERT OR UPDATE ON personagens
FOR EACH ROW
WHEN (pg_trigger_depth() < 1)
EXECUTE FUNCTION Calcular_Status();
